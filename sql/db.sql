/*
create database ta;
revoke connect on database ta from public;
create user ta_get password 'get';
grant connect on database ta to get,ta_get;
create user ta_post password 'get';
grant connect on database ta to post,ta_post;
create user ta_email password 'get';
grant connect on database ta to email,ta_email;
psql "host=cluster1.cluster-c8l1itv3i2dg.eu-west-2.rds.amazonaws.com dbname=ta user=postgres sslmode=require" xxx-f sql/db.sql
*/

drop schema if exists public;
drop schema if exists db cascade;
drop extension if exists btree_gin cascade;
drop extension if exists pg_trgm cascade;
drop extension if exists plperl cascade;
drop schema if exists x_btree_gin cascade;
drop schema if exists x_pg_trgm cascade;
revoke temporary on database ta from public;

create schema x_btree_gin;
create extension btree_gin schema x_btree_gin;
create schema x_pg_trgm;
create extension pg_trgm schema x_pg_trgm;
create extension plperl;

create schema db;
alter database ta set search_path to '$user',db,x_pg_trgm,x_btree_gin;
set search_path to '$user',db,x_pg_trgm,x_btree_gin;

create table one(
  one_stackapps_secret text default '' not null
, one_image_hash bytea check(length(one_image_hash)=32)
);
create unique index one_only_ind on one((1));

create table sesite(
  sesite_id integer generated by default as identity primary key
, sesite_url text not null unique
);

create table font(
  font_id integer generated by default as identity primary key
, font_name text not null
, font_is_monospace boolean not null
);

create table license(
  license_id integer generated by default as identity primary key
, license_name text unique not null
, license_href text
, license_is_versioned boolean default false not null
, license_description text unique not null
);

create table codelicense(
  codelicense_id integer generated by default as identity primary key
, codelicense_name text unique not null
, codelicense_is_versioned boolean default false not null
, codelicense_description text unique not null
);

create table kind(
  kind_id integer generated by default as identity primary key
, kind_can_all_edit boolean default true not null
, kind_has_answers boolean default true not null
, kind_has_question_votes boolean default false not null
, kind_has_answer_votes boolean default true not null
, kind_minimum_votes_to_answer integer default 0 not null
, kind_allows_question_multivotes boolean default true not null
, kind_allows_answer_multivotes boolean default true not null
, kind_show_answer_summary_toc boolean default false not null
, kind_questions_by_community boolean default false not null
, kind_answers_by_community boolean default false not null
);

create table label(
  label_id integer generated by default as identity primary key
, kind_id integer not null references kind
, label_name text not null
, label_code_language text 
, label_tio_language text
, label_url text
, unique (kind_id,label_id)
);

create table account(
  account_id integer generated by default as identity primary key
, account_name text
, account_create_at timestamptz not null default current_timestamp
, account_change_at timestamptz not null default current_timestamp
, account_change_id bigint generated by default as identity unique
, account_uuid uuid not null default gen_random_uuid()
, account_is_dev boolean default false not null
, account_license_id integer references license default 4 not null
, account_codelicense_id integer references codelicense default 1 not null
, account_notification_id integer generated by default as identity unique
, account_is_imported boolean default false not null
, account_permit_later_license boolean default false not null
, account_permit_later_codelicense boolean default false not null
, account_image_hash bytea check(length(account_image_hash)=32)
, account_email text check(account_email~'^\w+([-+.'']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$')
);
create unique index account_rate_limit_ind on account(account_create_at);

create type community_type_enum as enum ('public','private');
create table community(
  community_id integer generated by default as identity primary key
, community_name text not null
, community_room_id integer not null
, community_dark_shade bytea not null default decode('4d7ebb','hex') check(length(community_dark_shade)=3)
, community_mid_shade bytea not null default decode('d4dfec','hex') check(length(community_mid_shade)=3)
, community_light_shade bytea not null default decode('e7edf4','hex') check(length(community_light_shade)=3)
, community_highlight_color bytea not null default decode('f79804','hex') check(length(community_highlight_color)=3)
, community_code_language text 
, community_regular_font_id integer default 5 not null references font
, community_monospace_font_id integer default 4 not null references font
, community_display_name text not null
, community_type community_type_enum not null default 'private'
, community_warning_color bytea not null default decode('990000','hex') check(length(community_warning_color)=3)
, community_regular_font_is_locked boolean default false not null
, community_monospace_font_is_locked boolean default false not null
, community_tables_are_monospace boolean default false not null
, community_is_coming_soon boolean default false not null
, community_ordinal integer
, community_about_question_id integer
, community_ask_button_text text default 'Ask' not null
, community_banner_markdown text default '' not null
, community_wiki_account_id integer not null references account
, community_tio_language text
, community_import_sanction_id integer -- references sanction
, community_image_hash bytea check(length(community_image_hash)=32)
, community_keyboard text default '' not null
, community_black_color bytea not null default decode('000000','hex') check(length(community_black_color)=3)
, community_white_color bytea not null default decode('ffffff','hex') check(length(community_white_color)=3)
);

create table source(
  community_id integer references community
, sesite_id integer references sesite
, source_is_default boolean default true not null
, primary key (community_id,sesite_id)
);
create unique index source_default_ind on source(community_id) where source_is_default;

create type room_type_enum as enum ('public','gallery','private');

create table room(
  room_id integer generated by default as identity primary key
, community_id integer not null references community deferrable initially deferred
, room_type room_type_enum not null default 'public'
, room_name text
, room_can_listen boolean not null default true
, room_latest_chat_id bigint
, room_question_id integer -- references question deferrable initially deferred
, room_image_hash bytea check(length(room_image_hash)=32)
, room_chat_count integer default 0 not null
, room_flagged_chat_count integer default 0 not null
, room_deleted_chat_count integer default 0 not null
, unique (community_id,room_id)
);
create unique index room_latest_ind on room(room_id) include(room_latest_chat_id) where room_latest_chat_id is not null;
create index room_question_id_fk_ind on room(room_question_id);

alter table community add foreign key(community_room_id) references room deferrable initially deferred;

create table notification(
  notification_id bigint generated by default as identity primary key
, account_id integer references account
, notification_at timestamptz not null default current_timestamp
, notification_dismissed_at timestamptz
, notification_email_is_processed boolean
, unique (account_id,notification_id)
);
create index notification_latest_ind on notification(account_id, notification_dismissed_at desc nulls first);
create index notification_trim_ind on notification(account_id, notification_at) include(notification_id) where notification_dismissed_at is null;
create index notification_email on notification(notification_id) include(account_id) where notification_email_is_processed = false and notification_dismissed_at is null;

create or replace function _trigger_trim_notifications() returns trigger language plpgsql security definer set search_path=db,pg_temp as $$
begin
  update notification
  set notification_dismissed_at = current_timestamp
  where notification_id in (select notification_id from notification where account_id=new.account_id and notification_dismissed_at is null order by notification_at desc offset 99);
  --
  return null;
end;$$;
create trigger trigger_trim_notifications after insert on notification for each row execute function _trigger_trim_notifications();

create or replace function _trigger_setemail_notifications() returns trigger language plpgsql security definer set search_path=db,pg_temp as $$
begin
  if (select account_email is not null from account where account_id=new.account_id) then
    new.notification_email_is_processed = false;
  end if;
  --
  return new;
end;$$;
create trigger trigger_setemail_notifications before insert on notification for each row execute function _trigger_setemail_notifications();

create table member(
  account_id integer references account
, community_id integer references community
, primary key (account_id,community_id)
);

create table communicant(
  account_id integer references account
, community_id integer references community
, communicant_votes integer default 0 not null
, communicant_can_import boolean default false not null
, communicant_regular_font_id integer not null references font
, communicant_monospace_font_id integer not null references font
, communicant_is_post_flag_crew boolean default false not null
, communicant_keyboard text default '' not null
, primary key (account_id,community_id)
);

create table syndicate(
  syndicate_to_community_id integer references community
, syndicate_from_community_id integer references community
, primary key (syndicate_to_community_id,syndicate_from_community_id)
, check (syndicate_to_community_id<>syndicate_from_community_id)
);

create table syndication(
  account_id integer
, community_to_id integer
, community_from_id integer
, primary key (account_id,community_to_id,community_from_id)
, foreign key (account_id,community_from_id) references communicant deferrable initially deferred
, foreign key (account_id,community_to_id) references communicant deferrable initially deferred
, check (community_from_id<>community_to_id)
);

create table selink(
  account_id integer
, community_id integer
, sesite_id integer references sesite
, selink_user_id integer not null
, primary key (account_id,community_id,sesite_id)
, unique (community_id,sesite_id,selink_user_id) deferrable initially deferred
, foreign key (account_id,community_id) references communicant
, foreign key (community_id,sesite_id) references source
);
create unique index selink_user_id_ind on selink(community_id,sesite_id,selink_user_id);

create table account_history(
  account_history_id integer generated by default as identity primary key
, account_id integer not null references account
, account_history_at timestamptz not null
, account_history_name text not null default ''
);

create table login(
  login_uuid uuid primary key
, account_id integer not null references account
, login_resizer_percent integer default 70 not null check (login_resizer_percent between 0 and 100)
, login_chat_resizer_percent integer default 30 not null check (login_chat_resizer_percent between 0 and 100)
);

create table pin(
  pin_number bigint
, account_id integer references account
, pin_at timestamptz default current_timestamp not null
, primary key (pin_number,account_id)
);

create table chat(
  chat_id bigint generated by default as identity primary key
, community_id integer not null references community
, room_id integer not null references room
, account_id integer not null references account
, chat_reply_id bigint references chat
, chat_change_id bigint generated by default as identity unique
, chat_at timestamptz not null default current_timestamp
, chat_change_at timestamptz not null default current_timestamp
, chat_markdown text not null check (length(chat_markdown) between 1 and 5500)
, chat_flags integer default 0 not null
, chat_crew_flags integer default 0 not null
, chat_active_flags integer default 0 not null
, unique (room_id,chat_id)
, unique (community_id,room_id,chat_id)
, foreign key (community_id,room_id) references room(community_id,room_id) deferrable initially deferred
, foreign key (room_id,chat_reply_id) references chat(room_id,chat_id)
);
create index chat_latest_ind on chat(room_id,chat_at);
create index chat_search_ind on chat using gin (room_id, chat_markdown gin_trgm_ops);
create index chat_room_id_chat_id_fk_ind on chat(room_id,chat_id);
create index chat_poll_ind on chat(room_id,chat_change_id) include(chat_id);

create table thread(
  thread_ancestor_chat_id bigint references chat
, thread_descendant_chat_id bigint references chat
, community_id integer not null references community
, room_id integer not null references room
, primary key (thread_ancestor_chat_id,thread_descendant_chat_id)
, unique (thread_descendant_chat_id,thread_ancestor_chat_id)
, foreign key (community_id,room_id,thread_ancestor_chat_id) references chat(community_id,room_id,chat_id) deferrable initially deferred
, foreign key (community_id,room_id,thread_descendant_chat_id) references chat(community_id,room_id,chat_id) deferrable initially deferred
);

create table ping(
  chat_id bigint references chat
, account_id integer not null references account
, primary key (chat_id,account_id)
);

create table chat_history(
  chat_history_id bigint generated by default as identity primary key
, chat_id bigint not null references chat
, chat_history_at timestamptz default current_timestamp not null
, chat_history_markdown text not null
);
create index chat_history_chat_id on chat_history (chat_id);

create table writer(
  account_id integer references account
, room_id integer references room
, primary key (account_id,room_id)
);

create table listener(
  account_id integer references account
, room_id integer references room
, listener_latest_read_chat_id bigint
, primary key (account_id,room_id)
, foreign key (room_id,listener_latest_read_chat_id) references chat(room_id,chat_id)
);
create index listener_account_id_ind on listener(account_id) include(room_id,listener_latest_read_chat_id);

create table pinner(
  account_id integer references account
, room_id integer references room
, primary key (account_id,room_id)
);

create table participant(
  room_id integer references room
, account_id integer references account
, participant_latest_chat_at timestamptz not null default current_timestamp
, participant_chat_count integer default 0 not null
, participant_flagged_chat_count integer default 0 not null
, participant_deleted_chat_count integer default 0 not null
, primary key (room_id,account_id)
);
create index participant_latest on participant(room_id,participant_latest_chat_at);

create table chat_flag(
  chat_id bigint references chat
, account_id integer references account
, chat_flag_at timestamptz not null default current_timestamp
, chat_flag_direction integer not null check (chat_flag_direction in (-1,0,1))
, chat_flag_is_crew boolean default false not null
, primary key (chat_id,account_id)
);

create table chat_flag_history(
  chat_flag_history_id integer generated by default as identity primary key
, chat_id integer not null
, account_id integer not null
, chat_flag_history_at timestamptz default current_timestamp not null
, chat_flag_history_direction integer not null check (chat_flag_history_direction in (-1,0,1))
, chat_flag_history_is_crew boolean default false not null
, foreign key(chat_id,account_id) references chat_flag deferrable initially deferred
);

create table chat_star(
  chat_id bigint
, account_id integer references account
, room_id integer not null
, chat_star_at timestamptz not null default current_timestamp
, primary key (chat_id,account_id)
, foreign key (room_id,chat_id) references chat(room_id,chat_id)
);
create index chat_star_latest on chat_star(room_id,chat_star_at);

create table chat_year(
  room_id integer references room
, chat_year integer
, chat_year_count integer not null
, primary key (room_id,chat_year)
);

create table chat_month(
  room_id integer
, chat_year integer
, chat_month integer
, chat_month_count integer not null
, primary key (room_id,chat_year,chat_month)
, foreign key (room_id,chat_year) references chat_year
);

create table chat_day(
  room_id integer
, chat_year integer
, chat_month integer
, chat_day integer
, chat_day_count integer not null
, primary key (room_id,chat_year,chat_month,chat_day)
, foreign key (room_id,chat_year,chat_month) references chat_month
);

create table chat_hour(
  room_id integer
, chat_year integer
, chat_month integer
, chat_day integer
, chat_hour integer
, chat_hour_count integer not null
, primary key (room_id,chat_year,chat_month,chat_day,chat_hour)
, foreign key (room_id,chat_year,chat_month,chat_day) references chat_day
);

create table sanction(
  sanction_id integer generated by default as identity primary key
, kind_id integer references kind not null
, sanction_description text not null
, sanction_short_description text default '' not null
, community_id integer not null references community
, sanction_ordinal integer not null
, sanction_is_default boolean not null default false
, sanction_label_called text
, sanction_label_is_mandatory boolean default false not null
, sanction_default_label_id integer references label
, unique (community_id,kind_id,sanction_id)
);
create unique index sanction_ind on sanction(community_id,sanction_ordinal);
create unique index sanction_default_ind on sanction(community_id) where sanction_is_default;
alter table community add foreign key(community_import_sanction_id) references sanction;

create table question(
  question_id integer generated by default as identity primary key
, community_id integer not null references community deferrable initially deferred
, account_id integer not null references account
, question_at timestamptz not null default current_timestamp
, question_title text not null check (length(question_title) between 5 and 200)
, question_markdown text not null check (length(question_markdown) between 1 and 50000)
, question_room_id integer not null references room deferrable initially deferred
, question_change_at timestamptz not null default current_timestamp
, question_votes integer default 0 not null
, license_id integer references license not null
, codelicense_id integer references codelicense not null
, question_poll_id bigint generated by default as identity unique
, question_poll_major_id bigint generated by default as identity unique
, question_poll_minor_id bigint generated by default as identity unique
, question_se_question_id integer
, question_flags integer default 0 not null
, question_crew_flags integer default 0 not null
, question_active_flags integer default 0 not null
, question_se_imported_at timestamptz
, question_permit_later_license boolean default false not null
, question_permit_later_codelicense boolean default false not null
, kind_id integer references kind not null
, question_sesite_id integer references sesite
, question_tag_ids integer[] default array[]::integer[] not null
, question_published_at timestamptz
, question_is_public_visible boolean not null
, unique (community_id,question_id)
, unique (community_id,question_se_question_id)
, unique (community_id,question_id,kind_id,sanction_id)
, sanction_id integer references sanction not null
, foreign key (community_id,question_room_id) references room(community_id,room_id) deferrable initially deferred
, foreign key (community_id,kind_id,sanction_id) references sanction(community_id,kind_id,sanction_id) deferrable initially deferred
);
create unique index question_rate_limit_ind on question(account_id,question_at);
create unique index question_se_question_id_ind on question(community_id,question_sesite_id,question_se_question_id);
create unique index question_poll_major_id_ind on question(community_id,question_poll_major_id);
create index question_search_title_ind on question using gin (community_id, question_title gin_trgm_ops);
create index question_search_markdown_ind on question using gin (community_id, question_markdown gin_trgm_ops);
create index question_search_simple_ind on question using gin (community_id,kind_id,question_tag_ids,question_poll_major_id);
create index question_room_id_fk_ind on question(question_room_id);
create index question_usr_ind on question(community_id,account_id) include (question_at,question_votes);
create index question_feed_ind on question(community_id,question_at) include(question_id,question_title);

alter table room add foreign key(room_question_id) references question deferrable initially deferred;

alter table community add foreign key (community_about_question_id) references question;
alter table community add foreign key (community_id,community_about_question_id) references question(community_id,question_id);

create table question_history(
  question_history_id bigint generated by default as identity primary key
, question_id integer not null references question
, account_id integer not null references account
, question_history_at timestamptz default current_timestamp not null
, question_history_title text not null
, question_history_markdown text not null
);
create unique index question_history_rate_limit_ind on question_history(account_id,question_history_at);
create index question_history_question_ind on question_history(question_id) include(account_id);

create table answer(
  answer_id integer generated by default as identity primary key
, question_id integer not null references question
, account_id integer not null references account
, answer_at timestamptz not null default current_timestamp
, answer_markdown text not null check (length(answer_markdown) between 1 and 50000)
, answer_change_at timestamptz not null default current_timestamp
, answer_votes integer default 0 not null
, answer_se_answer_id integer
, answer_flags integer default 0 not null
, answer_crew_flags integer default 0 not null
, answer_active_flags integer default 0 not null
, license_id integer references license not null
, codelicense_id integer references codelicense not null
, answer_se_imported_at timestamptz
, answer_proposed_answer_id integer
, answer_summary text not null
, answer_permit_later_license boolean default false not null
, answer_permit_later_codelicense boolean default false not null
, community_id integer not null references community
, kind_id integer not null references kind deferrable initially deferred
, sanction_id integer not null references sanction deferrable initially deferred
, label_id integer references label
, foreign key (question_id,community_id,kind_id,sanction_id) references question(question_id,community_id,kind_id,sanction_id) deferrable initially deferred
, foreign key (kind_id,label_id) references label(kind_id,label_id)
);
create unique index answer_rate_limit_ind on answer(account_id,answer_at);
create index answer_question_id_ind on answer(question_id);
create index answer_usr_ind on answer(community_id,account_id) include (answer_at,answer_votes);

create table answer_history(
  answer_history_id bigint generated by default as identity primary key
, answer_id integer not null references answer
, account_id integer not null references account
, answer_history_at timestamptz default current_timestamp not null
, answer_history_markdown text not null
, answer_history_question_poll_major_id bigint
);
create unique index answer_history_rate_limit_ind on answer_history(account_id,answer_history_at);
create index answer_history_answer_ind on answer_history(answer_id) include(account_id);

create table tag(
  tag_id integer generated by default as identity primary key
, community_id integer not null references community
, tag_at timestamptz not null default current_timestamp
, tag_name text not null check (tag_name~'^[0-9a-zA-Z][- _.0-9a-zA-Z]{0,18}[0-9a-zA-Z]$')
, tag_description text default '' not null check (length(tag_description)<251)
, tag_implies_id integer
, tag_question_count integer default 0 not null
, tag_code_language text
, unique (community_id,tag_id)
, unique (community_id,tag_name)
, foreign key (community_id,tag_implies_id) references tag (community_id,tag_id)
);
create index tag_implies_id_fk_ind on tag(tag_implies_id);

create table mark(
  question_id integer
, tag_id integer
, community_id integer not null
, account_id integer not null references account
, mark_at timestamptz default current_timestamp not null
, primary key (question_id,tag_id)
, unique (tag_id,question_id)
, foreign key (community_id,question_id) references question (community_id,question_id)
, foreign key (community_id,tag_id) references tag (community_id,tag_id)
);

create table mark_history(
  mark_history_id integer generated by default as identity primary key
, question_id integer
, tag_id integer
, community_id integer not null
, account_id integer not null references account
, mark_history_is_removal boolean default false not null
, mark_history_at timestamptz default current_timestamp not null
, foreign key (community_id,question_id) references question (community_id,question_id)
, foreign key (community_id,tag_id) references tag (community_id,tag_id)
);
create index mark_history_question_id_fk_ind on mark_history(question_id,tag_id);
create index mark_history_tag_id_fk_ind on mark_history(tag_id,question_id);
create index mark_history_rate_limit on mark_history(account_id,mark_history_at);

create table question_vote(
  question_id integer references question
, account_id integer references account
, question_vote_at timestamptz default current_timestamp not null
, question_vote_votes integer not null check (question_vote_votes>=0)
, primary key (question_id,account_id)
, unique (account_id,question_id)
);

create table question_vote_history(
  question_vote_history_id integer generated by default as identity primary key
, question_id integer not null
, account_id integer not null
, question_vote_history_at timestamptz not null
, question_vote_history_votes integer not null check (question_vote_history_votes>=0)
, foreign key(question_id,account_id) references question_vote deferrable initially deferred
);

create table question_flag(
  question_id integer references question
, account_id integer references account
, question_flag_at timestamptz default current_timestamp not null
, question_flag_direction integer not null check (question_flag_direction in (-1,0,1))
, question_flag_is_crew boolean default false not null
, primary key (question_id,account_id)
, unique (account_id,question_id)
);

create table question_flag_history(
  question_flag_history_id integer generated by default as identity primary key
, question_id integer not null
, account_id integer not null
, question_flag_history_at timestamptz default current_timestamp not null
, question_flag_history_direction integer not null check (question_flag_history_direction in (-1,0,1))
, question_flag_history_is_crew boolean default false not null
, foreign key(question_id,account_id) references question_flag deferrable initially deferred
);

create table question_flag_notification(
  notification_id bigint primary key references notification
, question_flag_history_id integer references question_flag_history
);

create table answer_vote(
  answer_id integer references answer
, account_id integer references account
, answer_vote_at timestamptz default current_timestamp not null
--, answer_vote_direction integer not null check (answer_vote_direction in(-1,0,1))
--, answer_vote_repute integer not null check (answer_vote_repute>=0)
, answer_vote_votes integer not null check (answer_vote_votes>=0)
, primary key (answer_id,account_id)
, unique (account_id,answer_id)
);

create table answer_vote_history(
  answer_vote_history_id integer generated by default as identity primary key
, answer_id integer not null
, account_id integer not null
, answer_vote_history_at timestamptz not null
--, answer_vote_history_direction integer not null check (answer_vote_history_direction in(-1,0,1))
--, answer_vote_history_repute integer not null check (answer_vote_history_repute>=0)
, answer_vote_history_votes integer not null check (answer_vote_history_votes>=0)
, foreign key(answer_id,account_id) references answer_vote deferrable initially deferred
);

create table answer_flag(
  answer_id integer references answer
, account_id integer references account
, answer_flag_at timestamptz default current_timestamp not null
, answer_flag_direction integer not null check (answer_flag_direction in (-1,0,1))
, answer_flag_is_crew boolean default false not null
, primary key (answer_id,account_id)
, unique (account_id,answer_id)
);

create table answer_flag_history(
  answer_flag_history_id integer generated by default as identity primary key
, answer_id integer not null
, account_id integer not null
, answer_flag_history_at timestamptz default current_timestamp not null
, answer_flag_history_direction integer not null check (answer_flag_history_direction in (-1,0,1))
, answer_flag_history_is_crew boolean default false not null
, foreign key(answer_id,account_id) references answer_flag deferrable initially deferred
);

create table answer_flag_notification(
  notification_id bigint primary key references notification
, answer_flag_history_id integer references answer_flag_history
);

create table chat_notification(
  notification_id bigint primary key references notification
, chat_id bigint references chat
);

create table question_notification(
  notification_id bigint primary key references notification
, question_history_id integer references question_history
);

create table answer_notification(
  notification_id bigint primary key references notification
, answer_history_id integer references answer_history
);

create table system_notification(
  notification_id bigint primary key references notification
, system_notification_message text not null
, system_notification_community_id integer references community
);

create table subscription(
  account_id integer references account
, question_id integer references question
, primary key (account_id,question_id)
);

create table import(
  import_id integer generated by default as identity primary key
, import_at timestamptz not null default current_timestamp
, account_id integer references account
, community_id integer references community
, sesite_id integer references sesite
, import_qid text not null
, import_aids text default '' not null
);

create table environment(
  environment_name text primary key
);

create unlogged table error(
  error_at timestamptz default current_timestamp not null
, error_ua text not null
, error_text text not null
);

create table chat_onebox(
  chat_id bigint references chat
, chat_onebox_hash bytea check(length(chat_onebox_hash)=16)
, chat_onebox_markdown text default '' not null
);

/* 
create table one(
  stackapps_secret text default '' not null
, image_hash bytea check(length(image_hash)=32)
);
create unique index one_only_ind on one((1));

create view db.one(one_stackapps_secret,one_image_hash) as select * from one;

create table sesite(
  id integer generated by default as identity primary key
, url text not null unique
);

create view db.sesite(sesite_id,sesite_url) as select * from sesite;

create table font(
  id integer generated by default as identity primary key
, name text not null
, is_monospace boolean not null
);

create view db.font(font_id,font_name,font_is_monospace) as select * from font;

create table license(
  id integer generated by default as identity primary key
, name text unique not null
, href text
, is_versioned boolean default false not null
, description text unique not null
);

create view db.license(license_id,license_name,license_href,license_is_versioned,license_description) as select * from license;

create table codelicense(
  id integer generated by default as identity primary key
, name text unique not null
, is_versioned boolean default false not null
, description text unique not null
);

create view db.codelicense(codelicense_id,codelicense_name,codelicense_is_versioned,codelicense_description) as select * from codelicense;

create table kind(
  id integer generated by default as identity primary key
, can_all_edit boolean default true not null
, has_answers boolean default true not null
, has_question_votes boolean default false not null
, has_answer_votes boolean default true not null
, minimum_votes_to_answer integer default 0 not null
, allows_question_multivotes boolean default true not null
, allows_answer_multivotes boolean default true not null
, show_answer_summary_toc boolean default false not null
, questions_by_community boolean default false not null
, answers_by_community boolean default false not null
);

create view db.kind(kind_id,kind_can_all_edit,kind_has_answers,kind_has_question_votes,kind_has_answer_votes,kind_minimum_votes_to_answer,kind_allows_question_multivotes,kind_allows_answer_multivotes,kind_show_answer_summary_toc
                   ,kind_questions_by_community,kind_answers_by_community) as
select * from kind;

create table label(
  id integer generated by default as identity primary key
, kind_id integer not null references kind
, name text not null
, code_language text 
, tio_language text
, url text
, unique(kind_id,id)
);

create view db.label(label_id,kind_id,label_name,label_code_language,label_tio_language,label_url) as select * from label;

create table account(
  id integer generated by default as identity primary key
, name text
, create_at timestamptz not null default current_timestamp
, change_at timestamptz not null default current_timestamp
, change_id bigint generated by default as identity unique
, uuid uuid not null default gen_random_uuid()
, is_dev boolean default false not null
, license_id integer references license default 4 not null
, codelicense_id integer references codelicense default 1 not null
, notification_id integer generated by default as identity unique
, is_imported boolean default false not null
, permit_later_license boolean default false not null
, permit_later_codelicense boolean default false not null
, image_hash bytea check(length(image_hash)=32)
, email text check(email~'^\w+([-+.'']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$')
);
create index on account(create_at);

create view db.account(account_id,account_name,account_create_at,account_change_at,account_change_id,account_uuid,account_is_dev,account_license_id,account_codelicense_id,account_notification_id,account_is_imported
                      ,account_permit_later_license,account_permit_later_codelicense,account_image_hash,account_email) as
select * from account;

create table community(
  id integer generated by default as identity primary key
, name text not null
, room_id integer not null -- references room
, dark_shade bytea not null default decode('4d7ebb','hex') check(length(dark_shade)=3)
, mid_shade bytea not null default decode('d4dfec','hex') check(length(mid_shade)=3)
, light_shade bytea not null default decode('e7edf4','hex') check(length(light_shade)=3)
, highlight_color bytea not null default decode('f79804','hex') check(length(highlight_color)=3)
, code_language text 
, regular_font_id integer default 5 not null references font
, monospace_font_id integer default 4 not null references font
, display_name text not null
, is_private boolean not null default true
, warning_color bytea not null default decode('990000','hex') check(length(warning_color)=3)
, regular_font_is_locked boolean default false not null
, monospace_font_is_locked boolean default false not null
, tables_are_monospace boolean default false not null
, is_coming_soon boolean default false not null
, ordinal integer
, about_question_id integer
, ask_button_text text default 'Ask' not null
, banner_markdown text default '' not null
, wiki_account_id integer not null references account
, tio_language text
, import_sanction_id integer -- references sanction
, image_hash bytea check(length(image_hash)=32)
, keyboard text default '' not null
, black_color bytea not null default decode('000000','hex') check(length(black_color)=3)
, white_color bytea not null default decode('ffffff','hex') check(length(white_color)=3)
);

create view db.community(community_id,community_name,community_room_id,community_dark_shade,community_mid_shade,community_light_shade,community_highlight_color,community_code_language,community_regular_font_id,community_monospace_font_id
                        ,community_display_name,community_type,community_warning_color,community_regular_font_is_locked,community_monospace_font_is_locked,community_tables_are_monospace,community_is_coming_soon,community_ordinal
                        ,community_about_question_id,community_ask_button_text,community_banner_markdown,community_wiki_account_id,community_tio_language,community_import_sanction_id,community_image_hash,community_keyboard,community_black_color,community_white_color) as
select id,name,room_id,dark_shade,mid_shade,light_shade,highlight_color,code_language,regular_font_id,monospace_font_id,display_name
      ,case when is_private then 'private'::text else 'public'::text end 
      ,warning_color,regular_font_is_locked,monospace_font_is_locked,tables_are_monospace,is_coming_soon,ordinal,about_question_id,ask_button_text,banner_markdown,wiki_account_id,tio_language,import_sanction_id,image_hash,keyboard,black_color,white_color from community;

create table source(
  community_id integer references community
, sesite_id integer references sesite
, is_default boolean default true not null
, primary key (community_id,sesite_id)
);
create unique index source_default_ind on source(community_id) where is_default;

create view db.source(community_id,sesite_id,source_is_default) as select * from source;

create type room_type_enum as enum ('public','gallery','private');
create table room(
  id integer generated by default as identity primary key
, community_id integer not null references community
, type room_type_enum not null default 'public'
, name text
, can_listen boolean not null default true
, latest_chat_id bigint
, question_id integer -- references question
, image_hash bytea check(length(image_hash)=32)
, chat_count integer default 0 not null
, flagged_chat_count integer default 0 not null
, deleted_chat_count integer default 0 not null
, unique(community_id,id)
, foreign key (id,latest_chat_id) references chat(room_id,id)
);
create unique index room_latest_ind on room(id) include(latest_chat_id) where latest_chat_id is not null;
create index on room(question_id);
create index on room(community_id);

alter table community add foreign key(id,room_id) references room(community_id,id);

create view db.room(community_id,room_id,room_type,room_name,room_can_listen,room_latest_chat_id,room_question_id,room_image_hash,room_chat_count,room_flagged_chat_count,room_deleted_chat_count) as
select community_id,id,type,name,can_listen,latest_chat_id,question_id,image_hash,chat_count,flagged_chat_count,deleted_chat_count from room;

create table notification(
  id bigint generated by default as identity primary key
, account_id integer not null references account
, at timestamptz not null default current_timestamp
, dismissed_at timestamptz
, email_is_processed boolean
);
create index on notification(account_id, dismissed_at desc nulls first);
create index on notification(account_id, at) include(id) where dismissed_at is null;
create index on notification(id) include(account_id) where email_is_processed = false and dismissed_at is null;
create index on notification(account_id);

create view db.notification(notification_id,account_id,notification_at,notification_dismissed_at,notification_email_is_processed) as select * from notification;

create or replace function _trigger_trim_notifications() returns trigger language plpgsql security definer set search_path=postgres,pg_temp as $$
begin
  update notification
  set dismissed_at = current_timestamp
  where id in (select id from notification where account_id=new.account_id and dismissed_at is null order by at desc offset 99);
  --
  return null;
end;$$;
create trigger trigger_trim_notifications after insert on notification for each row execute function _trigger_trim_notifications();

create or replace function _trigger_setemail_notifications() returns trigger language plpgsql security definer set search_path=postgres,pg_temp as $$
begin
  if (select email is not null from account where id=new.account_id) then
    new.email_is_processed = false;
  end if;
  --
  return new;
end;$$;
create trigger trigger_setemail_notifications before insert on notification for each row execute function _trigger_setemail_notifications();

create table member(
  account_id integer references account
, community_id integer references community
, primary key (account_id,community_id)
);
create index on member(community_id);

create view db.member(account_id,community_id) as select * from member;

create table communicant(
  account_id integer references account
, community_id integer references community
, votes integer default 0 not null
, can_import boolean default false not null
, regular_font_id integer not null references font
, monospace_font_id integer not null references font
, is_post_flag_crew boolean default false not null
, keyboard text default '' not null
, primary key (account_id,community_id)
);
create index on communicant(community_id);

create view db.communicant(account_id,community_id,communicant_votes,communicant_can_import,communicant_regular_font_id,communicant_monospace_font_id,communicant_is_post_flag_crew,communicant_keyboard) as select * from communicant;

create table syndicate(
  to_community_id integer references community
, from_community_id integer references community
, primary key (to_community_id,from_community_id)
, check (to_community_id<>from_community_id)
);

create view db.syndicate(syndicate_to_community_id,syndicate_from_community_id) as select * from syndicate;

create table syndication(
  account_id integer
, to_community_id integer
, from_community_id integer
, primary key (account_id,to_community_id,from_community_id)
, foreign key (account_id,from_community_id) references communicant
, foreign key (account_id,to_community_id) references communicant
, check (to_community_id<>from_community_id)
);

create view db.syndication(account_id,community_to_id,community_from_id) as select * from syndication;

create table selink(
  account_id integer
, community_id integer
, sesite_id integer
, seuser_id integer not null
, primary key (account_id,community_id,sesite_id)
, unique (community_id,sesite_id,seuser_id)
, foreign key (account_id,community_id) references communicant
, foreign key (community_id,sesite_id) references source
);

create view db.selink(account_id,community_id,sesite_id,selink_user_id) as select * from selink;

create table account_history(
  id integer generated by default as identity primary key
, account_id integer not null references account
, at timestamptz not null
, name text not null default ''
);
create index on account_history(account_id);

create view db.account_history(account_history_id,account_id,account_history_at,account_history_name) as select * from account_history;

create table login(
  id uuid primary key
, account_id integer not null references account
, resizer_percent integer default 70 not null check (resizer_percent between 0 and 100)
, chat_resizer_percent integer default 30 not null check (chat_resizer_percent between 0 and 100)
);
create index on login(account_id);

create view db.login(login_uuid,account_id,login_resizer_percent,login_chat_resizer_percent) as select * from login;

create table pin(
  account_id integer references account
, number bigint
, at timestamptz default current_timestamp not null
, primary key (account_id,number)
);

create view db.pin(pin_number,account_id,pin_at) as select number,account_id,at from pin;

create table chat(
  id bigint generated by default as identity primary key
, room_id integer not null references room
, account_id integer not null references account
, reply_id bigint
, change_id bigint not null generated by default as identity unique
, at timestamptz not null default current_timestamp
, change_at timestamptz not null default current_timestamp
, markdown text not null check (length(markdown) between 1 and 5500)
, flags integer default 0 not null
, crew_flags integer default 0 not null
, active_flags integer default 0 not null
, unique(room_id,id)
, foreign key (room_id,reply_id) references chat(room_id,id)
);
create index on chat(room_id,at);
create index on chat using gin (room_id, markdown gin_trgm_ops);
create index on chat(room_id,change_id) include(id);
create index on chat(account_id);

create view db.chat(community_id,room_id,chat_id,account_id,chat_reply_id,chat_change_id,chat_at,chat_change_at,chat_markdown,chat_flags,chat_crew_flags,chat_active_flags) as
select community_id,room_id,id,account_id,reply_id,change_id,at,change_at,markdown,flags,crew_flags,active_flags from chat natural join (select community_id, id room_id from room) r;

create table thread(
  ancestor_chat_id bigint
, descendant_chat_id bigint
, room_id integer not null
, primary key (ancestor_chat_id,descendant_chat_id)
, foreign key (room_id,ancestor_chat_id) references chat(room_id,id)
, foreign key (room_id,descendant_chat_id) references chat(room_id,id)
);
create index on thread(descendant_chat_id);

create view db.thread(thread_ancestor_chat_id,thread_descendant_chat_id,community_id,room_id) as select community_id,ancestor_chat_id,descendant_chat_id,room_id from thread natural join (select community_id, id room_id from room) r;

create table ping(
  chat_id bigint references chat
, account_id integer references account
, primary key (chat_id,account_id)
);
create index on ping(account_id);

create view db.ping(chat_id,account_id) as select * from ping;

create table chat_history(
  id bigint generated by default as identity primary key
, chat_id bigint not null references chat
, at timestamptz default current_timestamp not null
, markdown text not null
);
create index on chat_history (chat_id);

create view db.chat_history(chat_history_id,chat_id,chat_history_at,chat_history_markdown) as select * from chat_history;

create table writer(
  account_id integer references account
, room_id integer references room
, primary key (account_id,room_id)
);
create index on writer (room_id);

create view db.writer(account_id,room_id) as select * from writer;

create table listener(
  account_id integer references account
, room_id integer references room
, latest_read_chat_id bigint
, primary key (account_id,room_id)
, foreign key (room_id,latest_read_chat_id) references chat(room_id,id)
);
create index on listener(account_id) include(room_id,latest_read_chat_id);
create index on listener (room_id);

create view db.listener(account_id,room_id,listener_latest_read_chat_id) as select * from listener;

create table pinner(
  account_id integer references account
, room_id integer references room
, primary key (account_id,room_id)
);
create index pinner_room_id_fk on pinner (room_id);

create view db.pinner(account_id,room_id) as select * from pinner;

create table participant(
  room_id integer references room
, account_id integer references account
, latest_chat_at timestamptz not null default current_timestamp
, chat_count integer default 0 not null
, flagged_chat_count integer default 0 not null
, deleted_chat_count integer default 0 not null
, primary key (room_id,account_id)
);
create index on participant(room_id,latest_chat_at);
create index on participant (account_id);

create view db.participant(room_id,account_id,participant_latest_chat_at,participant_chat_count,participant_flagged_chat_count,participant_deleted_chat_count) as select * from participant;

create table chat_flag(
  chat_id bigint references chat
, account_id integer references account
, at timestamptz not null default current_timestamp
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, primary key (chat_id,account_id)
);
create index on chat_flag (account_id);

create view db.chat_flag(chat_id,account_id,chat_flag_at,chat_flag_direction,chat_flag_is_crew) as select * from chat_flag;

create table chat_flag_history(
  id integer generated by default as identity primary key
, chat_id bigint not null
, account_id integer not null
, at timestamptz default current_timestamp not null
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, foreign key(chat_id,account_id) references chat_flag
);
create index on chat_flag_history (account_id);
create index on chat_flag_history (chat_id);

create view db.chat_flag_history(chat_flag_history_id,chat_id,account_id,chat_flag_history_at,chat_flag_history_direction,chat_flag_history_is_crew) as select * from chat_flag_history;

create table chat_star(
  chat_id bigint
, account_id integer references account
, room_id integer not null
, at timestamptz not null default current_timestamp
, primary key (chat_id,account_id)
, foreign key (room_id,chat_id) references chat(room_id,id)
);
create index on chat_star(room_id,at);

create view db.chat_star(chat_id,account_id,chat_star_at,room_id) as select chat_id,account_id,at,room_id from chat_star;

create table chat_year(
  room_id integer references room
, year integer
, count integer not null
, primary key (room_id,year)
);

create view db.chat_year(room_id,chat_year,chat_year_count) as select * from chat_year;

create table chat_month(
  room_id integer
, year integer
, month integer
, count integer not null
, primary key (room_id,year,month)
, foreign key (room_id,year) references chat_year
);

create view db.chat_year(room_id,chat_year,chat_year_count) as select * from chat_year;

create table chat_day(
  room_id integer
, year integer
, month integer
, day integer
, day_count integer not null
, primary key (room_id,year,month,day)
, foreign key (room_id,year,month) references chat_month
);

create view db.chat_day(room_id,chat_year,chat_month,chat_day,chat_day_count) as select * from chat_day;

create table chat_hour(
  room_id integer
, year integer
, month integer
, day integer
, hour integer
, hour_count integer not null
, primary key (room_id,year,month,day,hour)
, foreign key (room_id,year,month,day) references chat_day
);

create view db.chat_hour(room_id,chat_year,chat_month,chat_day,chat_hour,chat_hour_count) as select * from chat_hour;

create table sanction(
  id integer generated by default as identity primary key
, community_id integer not null references community
, kind_id integer not null references kind
, description text not null
, short_description text default '' not null
, ordinal integer not null
, is_default boolean not null default false
, label_called text
, label_is_mandatory boolean default false not null
, default_label_id integer
, unique (community_id,id)
, foreign key (kind_id,default_label_id) references label(kind_id,id)
);
create unique index sanction_ord_ind on sanction(community_id,ordinal);
create unique index sanction_default_ind on sanction(community_id) where is_default;

create view db.sanction(kind_id,community_id,sanction_ordinal,sanction_is_default,sanction_id,sanction_description,sanction_short_description,sanction_label_called,sanction_label_is_mandatory,sanction_default_label_id) as
select kind_id,community_id,ordinal,is_default,id,description,short_description,label_called,label_is_mandatory,default_label_id from sanction;

alter table community add foreign key(id,import_sanction_id) references sanction(community_id,id);

create table question(
  id integer generated by default as identity primary key
, community_id integer not null
, sanction_id integer not null
, account_id integer not null references account
, at timestamptz not null default current_timestamp
, title text not null check (length(title) between 5 and 200)
, markdown text not null check (length(markdown) between 1 and 50000)
, room_id integer not null
, change_at timestamptz not null default current_timestamp
, votes integer default 0 not null
, license_id integer references license not null
, codelicense_id integer references codelicense not null
, poll_id bigint generated by default as identity unique
, poll_major_id bigint generated by default as identity unique
, poll_minor_id bigint generated by default as identity unique
, sequestion_id integer
, flags integer default 0 not null
, crew_flags integer default 0 not null
, active_flags integer default 0 not null
, se_imported_at timestamptz
, permit_later_license boolean default false not null
, permit_later_codelicense boolean default false not null
, sesite_id integer references sesite
, tag_ids integer[] default array[]::integer[] not null
, published_at timestamptz
, is_public_visible boolean not null
, unique (community_id,id)
, unique (community_id,sequestion_id)
, foreign key (community_id,room_id) references room(community_id,id)
, foreign key (community_id,sanction_id) references sanction(community_id,id)
);
create unique index question_sequestion_id_ind on question(community_id,sesite_id,sequestion_id);
create unique index question_poll_major_id_ind on question(community_id,poll_major_id);
create index on question(account_id,at);
create index on question using gin (community_id, title gin_trgm_ops);
create index on question using gin (community_id, markdown gin_trgm_ops);
create index on question using gin (community_id,sanction_id,tag_ids,poll_major_id);
create index on question(room_id);
create index on question(community_id,account_id) include (at,votes);
create index on question(community_id,at) include(id,title);

create view db.question(community_id,account_id,question_id,question_at,question_title,question_markdown,question_room_id,question_change_at,question_votes,license_id,codelicense_id,question_poll_id,question_poll_major_id,question_poll_minor_id
                       ,question_se_question_id,question_flags,question_crew_flags,question_active_flags,question_se_imported_at,question_permit_later_license,question_permit_later_codelicense,kind_id,question_sesite_id,question_tag_ids,sanction_id
                       ,question_published_at,question_is_public_visible) as
select community_id,account_id,id,at,title,markdown,room_id,change_at,votes,license_id,codelicense_id,poll_id,poll_major_id,poll_minor_id,sequestion_id,flags,crew_flags,active_flags,se_imported_at,permit_later_license,permit_later_codelicense
      ,kind_id,sesite_id,tag_ids,sanction_id,published_at,is_public_visible
from question natural join (select id sanction_id, kind_id from sanction) s;

alter table room add foreign key(community_id,question_id) references question(community_id,id);
alter table community add foreign key (id,about_question_id) references question(community_id,id);

create table question_history(
  id bigint generated by default as identity primary key
, question_id integer not null references question
, account_id integer not null references account
, at timestamptz default current_timestamp not null
, title text not null
, markdown text not null
);
create index on question_history(account_id,at);
create index on question_history(question_id) include(account_id);

create view db.question_history(question_history_id,question_id,account_id,question_history_at,question_history_title,question_history_markdown) as select id,question_id,account_id,at,title,markdown from question_history;

create table answer(
  id integer generated by default as identity primary key
, question_id integer not null references question
, account_id integer not null references account
, label_id integer references label
, at timestamptz not null default current_timestamp
, markdown text not null check (length(markdown) between 1 and 50000)
, change_at timestamptz not null default current_timestamp
, votes integer default 0 not null
, seanswer_id integer
, flags integer default 0 not null
, crew_flags integer default 0 not null
, active_flags integer default 0 not null
, license_id integer references license not null
, codelicense_id integer references codelicense not null
, se_imported_at timestamptz
, summary text not null
, permit_later_license boolean default false not null
, permit_later_codelicense boolean default false not null
);
create index on answer(account_id,at) include (votes);
create index on answer(question_id);

create view db.answer(answer_id,question_id,account_id,answer_at,answer_markdown,answer_change_at,answer_votes,license_id,codelicense_id,answer_se_answer_id,answer_flags,answer_crew_flags,answer_active_flags,answer_se_imported_at
                     ,answer_summary,answer_permit_later_license,answer_permit_later_codelicense,community_id,kind_id,sanction_id,label_id) as
select id,question_id,account_id,at,markdown,change_at,votes,license_id,codelicense_id,seanswer_id,flags,crew_flags,active_flags,se_imported_at,summary,permit_later_license,permit_later_codelicense,community_id,kind_id,sanction_id,label_id
from answer natural join (select id question_id, community_id, sanction_id from question) q natural join (select id sanction_id, community_id, kind_id from sanction) s;

create table answer_history(
  id bigint generated by default as identity primary key
, answer_id integer not null references answer
, account_id integer not null references account
, at timestamptz default current_timestamp not null
, markdown text not null
);
create index on answer_history(account_id,at);
create index on answer_history(answer_id,account_id);

create view db.answer_history(answer_history_id,answer_id,account_id,answer_history_at,answer_history_markdown) as select * from answer_history;

create table tag(
  id integer generated by default as identity primary key
, community_id integer not null references community
, at timestamptz not null default current_timestamp
, name text not null check (name~'^[0-9a-zA-Z][- _.0-9a-zA-Z]{0,18}[0-9a-zA-Z]$')
, description text default '' not null check (length(description)<251)
, implies_id integer
, question_count integer default 0 not null
, code_language text
, unique (community_id,id)
, unique (community_id,name)
, foreign key (community_id,implies_id) references tag (community_id,id)
);
create index on tag(community_id);
create index on tag(implies_id);

create view db.tag(tag_id,community_id,tag_at,tag_name,tag_description,tag_implies_id,tag_question_count,tag_code_language) as select * from tag;

create table mark(
  question_id integer
, tag_id integer
, community_id integer not null
, at timestamptz default current_timestamp not null
, primary key (question_id,tag_id)
, foreign key (community_id,question_id) references question (community_id,id)
, foreign key (community_id,tag_id) references tag (community_id,id)
);
create index on mark(tag_id);

create view db.mark(question_id,tag_id,community_id,mark_at) as select * from mark;

create table mark_history(
  id integer generated by default as identity primary key
, question_id integer not null
, tag_id integer not null
, community_id integer not null
, account_id integer not null references account
, is_removal boolean default false not null
, at timestamptz default current_timestamp not null
, foreign key (community_id,question_id) references question (community_id,id)
, foreign key (community_id,tag_id) references tag (community_id,id)
);
create index on mark_history(account_id,at);
create index on mark_history(question_id);

create view db.mark_history(mark_history_id,question_id,tag_id,community_id,account_id,mark_history_is_removal,mark_history_at) as select * from mark_history;

create table question_vote(
  question_id integer references question
, account_id integer references account
, at timestamptz default current_timestamp not null
, votes integer not null check (votes>=0)
, primary key (question_id,account_id)
);

create view db.question_vote(question_id,account_id,question_vote_at,question_vote_votes) as select * from question_vote;

create table question_vote_history(
  id integer generated by default as identity primary key
, question_id integer not null
, account_id integer not null
, at timestamptz not null
, votes integer not null check (votes>=0)
, foreign key(question_id,account_id) references question_vote
);

create view db.question_vote_history(question_vote_history_id,question_id,account_id,question_vote_history_at,question_vote_history_votes) as select * from question_vote_history;

create table question_flag(
  question_id integer references question
, account_id integer references account
, at timestamptz default current_timestamp not null
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, primary key (question_id,account_id)
);

create view db.question_flag(question_id,account_id,question_flag_at,question_flag_direction,question_flag_is_crew) as select * from question_flag;

create table question_flag_history(
  id integer generated by default as identity primary key
, question_id integer not null
, account_id integer not null
, at timestamptz default current_timestamp not null
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, foreign key(question_id,account_id) references question_flag
);

create view db.question_flag_history(question_flag_history_id,question_id,account_id,question_flag_history_at,question_flag_history_direction,question_flag_history_is_crew) as select * from question_flag_history;

create table question_flag_notification(
  notification_id bigint primary key references notification
, question_flag_history_id integer not null references question_flag_history
);

create view db.question_flag_notification(question_flag_history_id,notification_id) as select question_flag_history_id,notification_id from question_flag_notification;

create table answer_vote(
  answer_id integer references answer
, account_id integer references account
, at timestamptz default current_timestamp not null
, votes integer not null check (votes>=0)
, primary key (answer_id,account_id)
);

create view db.answer_vote(answer_id,account_id,answer_vote_at,answer_vote_votes) as select * from answer_vote;

create table answer_vote_history(
  id integer generated by default as identity primary key
, answer_id integer not null
, account_id integer not null
, at timestamptz not null
, votes integer not null check (votes>=0)
, foreign key(answer_id,account_id) references answer_vote
);

create view db.answer_vote_history(answer_vote_history_id,answer_id,account_id,answer_vote_history_at,answer_vote_history_votes) as select * from answer_vote_history;

create table answer_flag(
  answer_id integer references answer
, account_id integer references account
, at timestamptz default current_timestamp not null
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, primary key (answer_id,account_id)
);

create view db.answer_flag(answer_id,account_id,answer_flag_at,answer_flag_direction,answer_flag_is_crew) as select * from answer_flag;

create table answer_flag_history(
  id integer generated by default as identity primary key
, answer_id integer not null
, account_id integer not null
, at timestamptz default current_timestamp not null
, direction integer not null check (direction in (-1,0,1))
, is_crew boolean default false not null
, foreign key(answer_id,account_id) references answer_flag
);

create view db.answer_flag_history(answer_flag_history_id,answer_id,account_id,answer_flag_history_at,answer_flag_history_direction,answer_flag_history_is_crew) as select * from answer_flag_history;

create table answer_flag_notification(
  notification_id bigint primary key references notification
, answer_flag_history_id integer not null references answer_flag_history
);

create view db.answer_flag_notification(answer_flag_history_id,notification_id) as select answer_flag_history_id,notification_id from answer_flag_notification;

create table chat_notification(
  notification_id bigint primary key references notification
, chat_id bigint not null references chat
);

create view db.chat_notification(chat_id,notification_id) as select notification_id,chat_id from chat_notification;

create table question_notification(
  notification_id bigint primary key references notification
, question_history_id integer not null references question_history
);

create view db.question_notification(question_history_id,notification_id) as select notification_id,question_history_id from question_notification;

create table answer_notification(
  notification_id bigint primary key references notification
, answer_history_id integer not null references answer_history
);

create view db.answer_notification(answer_history_id,notification_id) as select notification_id,answer_history_id from answer_notification;

create table system_notification(
  notification_id bigint primary key references notification
, message text not null
, community_id integer references community
);

create view db.system_notification(system_notification_message,system_notification_community_id,notification_id) as select message,community_id,notification_id from system_notification;

create table subscription(
  account_id integer references account
, question_id integer references question
, primary key (account_id,question_id)
);

create view db.subscription(account_id,question_id) as select * from subscription;

create table import(
  id integer generated by default as identity primary key
, at timestamptz not null default current_timestamp
, account_id integer not null references account
, community_id integer not null references community
, sesite_id integer references sesite
, qid text not null
, aids text default '' not null
);

create view db.import(import_id,import_at,account_id,community_id,import_qid,import_aids,sesite_id) as select id,at,account_id,community_id,qid,aids,sesite_id from import;

create table environment(
  name text primary key
);

create view db.environment(environment_name) as select * from environment;

create unlogged table error(
  at timestamptz default current_timestamp not null
, ua text not null
, text text not null
);

create view db.error(error_at,error_ua,error_text) as select * from error;

create table chat_onebox(
  chat_id bigint references chat
, hash bytea check(length(hash)=16)
, markdown text default '' not null
);

create view db.chat_onebox(chat_id,chat_onebox_hash,chat_onebox_markdown) as select * from chat_onebox;

*/